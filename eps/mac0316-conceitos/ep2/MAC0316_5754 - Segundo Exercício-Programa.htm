<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>MAC0316/5754 - Segundo Exerc&iacute;cio-Programa</title>
<link rel="stylesheet" href="stylesheet.css" type="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>

<body>
<h2>Segundo Exerc&iacute;cio-Programa: Interpretador Estendido</h2>
<h3 class="Subheading">
MAC0316/MAC5754 - Conceitos de Linguagens de Programa&ccedil;&atilde;o
</h3>
<p />

O segundo exerc&iacute;cio-programa &eacute; o <a
href="http://www.cs.brown.edu/courses/cs173/2008/Assignments/02-xinterp.html"><em>Extended
Interpreter</em></a> proposto por <a
href="http://www.cs.brown.edu/~sk/">Sriram Krishnamurthy</a> (o autor do
PLAI), com as modifica&ccedil;&otilde;es especificadas abaixo.<p />

<h3>Modifica&ccedil;&otilde;es em rela&ccedil;&atilde;o &agrave; proposta original</h3>
<p />
Faremos tr&ecirc;s modifica&ccedil;&otilde;es no <a
href="http://www.cs.brown.edu/courses/cs173/2008/Assignments/02-xinterp.html">enunciado
original</a> do Prof. Krishnamurthy. As duas primeiras s&atilde;o burocr&aacute;ticas e a
terceira &eacute; de conte&uacute;do.
<p />
Estas s&atilde;o as modifica&ccedil;&otilde;es burocr&aacute;ticas: 
<ul>
  <li>Substitua as ocorr&ecirc;ncias de "DrScheme" por "DrRacket".</li>
  <li>Em vez de entregar dois arquivos (<code>xinterp.ss</code> e
      <code>xinterp-lazy.ss</code>), siga a conven&ccedil;&atilde;o de entrega definida
      ao final desta p&aacute;gina.</li> 
</ul>

Vejamos agora a modifica&ccedil;&atilde;o n&atilde;o burocr&aacute;tica. Na <a
href="http://www.cs.brown.edu/courses/cs173/2008/Assignments/02-xinterp.html">proposta
original</a> de S. Krishnamurthy, a forma <code>with</code> aparece tanto
na sintaxe concreta como na sintaxe abstrata da linguagem CFWAE. Como a
defini&ccedil;&atilde;o do tipo <code>CFWAE</code> inclui uma variante <code>with</code>,
essa proposta permite (mas n&atilde;o obriga) que um <em>parser</em> gere &aacute;rvores
sint&aacute;ticas contendo n&oacute;s <code>with</code>.  Em outras palavras, o enunciado
original permite que voc&ecirc; decida se o seu <em>parser</em> vai ou n&atilde;o vai gerar
&aacute;rvores sint&aacute;ticas contendo n&oacute;s <code>with</code>. Essa decis&atilde;o separa as
poss&iacute;veis solu&ccedil;&otilde;es em duas categorias:
<ol>
  <li>Num tipo de solu&ccedil;&atilde;o, o <em>parser</em> traduz ocorr&ecirc;ncias concretas da
      forma sint&aacute;tica <code>with</code> em n&oacute;s <code>with</code> da &aacute;rvore
      sint&aacute;tica.<p /></li> 
  <li>No outro tipo de solu&ccedil;&atilde;o, o <em>parser</em> converte ocorr&ecirc;ncias
      concretas da forma sint&aacute;tica <code>with</code> em chamadas a fun&ccedil;&otilde;es
      an&ocirc;nimas, da maneira descrita no PLAI e vista em classe. Cada ocorr&ecirc;ncia
      da forma <code>with</code> no programa concreto gera um n&oacute;
      <code>app</code> da &aacute;rvore sint&aacute;tica. Neste tipo de solu&ccedil;&atilde;o, as &aacute;rvores
      sint&aacute;ticas nunca conter&atilde;o n&oacute;s <code>with</code>. Embora permitidos pela
      sintaxe abstrata, tais n&oacute;s n&atilde;o ser&atilde;o utilizados.<p /></li> 
</ol>
Na alternativa 2, o <code>with</code> &eacute; apenas um modo conveniente ("ac&uacute;car
sint&aacute;tico") para representar uma chamada a uma fun&ccedil;&atilde;o an&ocirc;nima. Essa
alternativa simplifica a implementa&ccedil;&atilde;o do interpretador, pois somente o
<em>parser</em> precisa lidar com a forma <code>with</code>. Al&eacute;m disso,
considero que a alternativa 2 &eacute; a "mais educativa", pois ela mostra, de modo
bem concreto, que formas como a <code>with</code> (ou como a forma
<code>let</code> do Scheme) n&atilde;o s&atilde;o constru&ccedil;&otilde;es essenciais.
<p />
Em vez de deixar a seu crit&eacute;rio a escolha entre os dois tipos de solu&ccedil;&otilde;es
acima, resolvi especificar que <u>deve ser implementada uma solu&ccedil;&atilde;o do tipo
2</u>. &Eacute; essa a diferen&ccedil;a b&aacute;sica entre este exerc&iacute;cio-programa e o proposto
por S. Krishnamurthy. Tudo o que segue &eacute; consequ&ecirc;ncia dessa decis&atilde;o. 
<p />
J&aacute; que nossas &aacute;rvores sint&aacute;ticas nunca conter&atilde;o n&oacute;s <code>with</code>, podemos
eliminar da sintaxe abstrata o tipo correspondente a esses n&oacute;s, ou seja,
podemos remover a variante <code>with</code> do <code>define-type</code> para
<code>CFWAE</code>. Podemos remover tamb&eacute;m a defini&ccedil;&atilde;o do tipo
<code>Binding</code>, pois esse tipo aparece somente na variante
<code>with</code>. Essas altera&ccedil;&otilde;es devem ser aplicadas ao c&oacute;digo que est&aacute;
na se&ccedil;&atilde;o <em>Support Code</em> do enunciado original. Em vez do modelo
especificado na se&ccedil;&atilde;o <em>Support Code</em>, use o seguinte modelo de c&oacute;digo
(sem fazer nenhuma altera&ccedil;&atilde;o nele): 
<p />
<pre>
(define-type CFAE
  [num (n number?)]
  [binop (op procedure?) (lhs CFAE?) (rhs CFAE?)]
  [id (name symbol?)]
  [if0 (c CFAE?) (t CFAE?) (e CFAE?)]
  [fun (args (listof symbol?)) (body CFAE?)]
  [app (f CFAE?) (args (listof CFAE?))])

(define-type Env
  [mtEnv]
  [anEnv (name symbol?) (value CFAE-Value?) (env Env?)])

(define-type CFAE-Value
  [numV (n number?)]
  [closureV (params (listof symbol?))
            (body CFAE?)
            (env Env?)])

;; parse : expression -> CFAE
;; This procedure parses an expression into a CFAE
(define (parse sexp)
  ...)

;; interp : CFAE -> CFAE-Value
;; This procedure interprets the given CFAE and produces a result
;; in the form of a CFAE-Value (either a closureV or a numV)
(define (interp expr)
  ...)

</pre>
<p />
Note que o tipo <code>CFWAE</code> do modelo original foi renomeado para
<code>CFAE</code>, j&aacute; que o <code>with</code> desapareceu da sintaxe
abstrata (embora continue presente na sintaxe concreta CFWAE). Agora a fun&ccedil;&atilde;o 
<code>parse</code> recebe uma <em>s-expression</em> com uma express&atilde;o CFWAE e
devolve a inst&acirc;ncia do tipo <code>CFAE</code> que &eacute; a raiz da &aacute;rvore sint&aacute;tica 
correspondente. 
<p />
Na segunda parte do exerc&iacute;cio-programa (avalia&ccedil;&atilde;o pregui&ccedil;osa), o tipo
<code>CFAE-Value</code> deve conter uma variante <code>exprV</code>:
<pre>
(define-type CFAE-Value
  [numV (n number?)]
  [closureV (params (listof symbol?))
            (body CFAE?)
            (env Env?)]
  [exprV (expr CFAE?) (env Env?)]))
</pre>
<p />
Caso voc&ecirc; decida implementar avalia&ccedil;&atilde;o pregui&ccedil;osa com <em>caching</em> (a
implementa&ccedil;&atilde;o de <em>caching</em> &eacute; <u>opcional</u> - quem a fizer receber&aacute;
um b&ocirc;nus na nota deste EP), sua variante <code>exprV</code> ter&aacute; um terceiro
campo. Esse campo dever&aacute; ser uma <code>box</code> mut&aacute;vel, an&aacute;loga &agrave; usada
na se&ccedil;&atilde;o 8.2 do PLAI (vide c&oacute;digo na p&aacute;gina 78 e listagens nas figuras 8.3 e
8.4).
<p />
<h3>Sobre a entrega</h3>
Este EP deve ser feito individualmente. Entregue sua solu&ccedil;&atilde;o at&eacute; o dia
3 de maio, pelo sistema <a href="http://paca.ime.usp.br">Paca/Moodle</a>.
<p />
Deve ser entregue um arquivo tar.gz ou zip que satisfa&ccedil;a os seguintes
requisitos:<p />
<ul>
  <li>O nome do arquivo deve ser da forma
      <code>ep2-&lt;seu-nome&gt;.tar.gz</code> ou
      <code>ep2-&lt;seu-nome&gt;.zip</code>.
      Por exemplo: <code>ep2-fulano-de-tal.zip</code>.
      No nome do arquivo devem ser omitidos os
      acentos do seu nome. Al&eacute;m disso, a separa&ccedil;&atilde;o entre palavras n&atilde;o deve ser feita
      com espa&ccedil;os. Ou seja, o arquivo n&atilde;o deve se chamar 
      "<code>ep2-jo&atilde;o-da-silva.zip</code>" nem
      "<code>ep2&nbsp;joao&nbsp;da&nbsp;silva.zip</code>".<p /></li>
      
  <li>O desempacotamento do arquivo tar.gz ou zip deve produzir um
      diret&oacute;rio com o mesmo nome do arquivo, menos o sufixo
      <code>.tar.gz</code> ou <code>.zip</code>. (Exemplo:
      <code>ep2-fulano-de-tal</code>.) Todos os arquivos desempacotados devem
      estar dentro desse diret&oacute;rio.<p /></li>
      
  <li>O diret&oacute;rio desempacotado deve conter:<p />
      <ul>
	<li>o seu arquivo <code>xinterp.ss</code>, com a primeira parte do
	    exerc&iacute;cio-programa (avalia&ccedil;&atilde;o &aacute;vida);<p /></li> 
	<li>o seu arquivo <code>xinterp-lazy.ss</code>, com a segunda parte do
	    exerc&iacute;cio-programa (avalia&ccedil;&atilde;o pregui&ccedil;osa).<p /></li>
      </ul><p /></li>
</ul>

<p />
<hr />
<address>

<a href="http://jigsaw.w3.org/css-validator"><img src="../../vcss.gif"
   alt="Valid CSS!" align="right" border="0" width="88" height="31" /></a>  
<a href="http://validator.w3.org/check/referer"><img src="../../vxhtml10.gif"
   alt="Valid XHTML 1.0!" align="right" border="0" width="88"
   height="31" /></a>  
<!-- hhmts start -->
Last modified: Thu Apr 14 23:02:57 BRT 2011
<!-- hhmts end -->
<br />
</address>
</body>

</html>
